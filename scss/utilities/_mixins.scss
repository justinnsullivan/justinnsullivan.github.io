// ==========================================================================
// Mixins
// ==========================================================================
// BEM selectors
@mixin e($element) {
	&__#{$element} {
		@content;
	}
}
@mixin m($modifier) {
	&--#{$modifier} {
		@content;
	}
}
// Media queries
@mixin mq($break) {
	@if $break == "small" {
		@media (min-width: $brkpoint-sm) and (max-width: $brkpoint-md) {
			 @content;
		}
	}
	@else if $break == "medium" {
		@media (min-width: $brkpoint-md + 1) {
			 @content;
		}
	}
	@else if $break == "large" {
		@media (min-width: $brkpoint-lg) {
			 @content;
		}
	}
	@else {
		 @error"Whoops! No value could be retrieved for `#{$break}`. ";
	}
}
// Generate modifier color classes
@mixin bg-colors($map) {
	 @each $theme, $color in $map{
		&--#{$theme} {
			background-color: $color;
		}
	}
}
// Generating :before or :after pseudo-element shapes
@mixin p-el( $el, $el-w: null, $el-h: null) {
	@if $el == "before" or $el == "after" {
		&:#{$el} {
			@extend %pseudos;
			width: $el-w;
			height: $el-h;
			@content;
		}
	}
	@else {
		 @error"`#{$el}` is not a valid pseudo-element.";
	}
}
// Image replacement
@mixin img-replace($img, $w, $h, $disp: block) {
	background-image: url('#{$path--rel}/#{$img}');
	background-repeat: no-repeat;
	width: $w;
	height: $h;
	display: $disp;
}
// Adjacent sibling margins
@mixin doubly($margin: 1em) {
	& + & {
		margin-left: $margin;
		@content;
	}
}
// Grid Columns
@mixin g-columns {
	 @for $i from 1 through $g-col-count{
		$context: g-context($g-col-width, $g-col-count ,$g-gutter-width) !global;
		$target: ($g-col-width * $i) + ($g-gutter-width * ($i - 1));
		// Generate column modifier classes
		&--#{$i} {
			width: percentage($target / $context);
		}
	}
}
@mixin prefixed($property, $value) {
	-webkit-#{$property}: #{$value};
	-moz-#{$property}: #{$value};
	-ms-#{$property}: #{$value};
	-o-#{$property}: #{$value};
	#{$property}: #{$value};
}
/* Underline From Left */
@mixin underline-from-left {
	$duration: .5s !default;
	position: relative;
	overflow: hidden;
	&:before {
		content: "";
		position: absolute;
		z-index: 1;
		left: 0;
		right: 100%;
		bottom: 0;
		background: $color-primary;
		height: 4px;
		@include prefixed(transition-property, "right");
		@include prefixed(transition-duration, $duration);
		@include prefixed(transition-ÃŸtiming-function, ease-out);
	}
	&:active,
	&:focus,
	&:hover {
		&:before {
			right: 0;
		}
	}
}
/* Fade */
@mixin fade {
	$duration: .3s !default;
	overflow: hidden;
	@include prefixed(transition-duration, $duration);
	@include prefixed(transition-property, "color, background-color");

	&:hover,
	&:focus,
	&:active {
		background-color: palette(gray,dark);
		color: white;
	}
}
